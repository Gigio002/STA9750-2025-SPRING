[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Giovanni Scacco - An Italian journey in The United Sates",
    "section": "",
    "text": "Hello! I‚Äôm Giovanni Scacco, an International student from Italy, currently pursuing a Master program in Business Analytics at Baruch College, specializing in Accounting. With a background in accounting, finance, data analysis, and software asset management, I thrive at the intersection of technology and business efficiency.\nMy professional journey has taken me through roles in accounting, risk advisory, and integration solutions, including an internship at Deloitte Risk Advisory. I am passionate about leveraging data-driven insights to optimize IT governance and financial strategies.\n\n\n\nüìß Email Me\nüîó LinkedIn\nStay tuned as I build out this site to share my experiences, projects, and insights!\n\nLast Updated: Wednesday 03 05, 2025 at 17:46PM"
  },
  {
    "objectID": "index.html#about-me",
    "href": "index.html#about-me",
    "title": "Giovanni Scacco - An Italian journey in The United Sates",
    "section": "",
    "text": "Hello! I‚Äôm Giovanni Scacco, an International student from Italy, currently pursuing a Master program in Business Analytics at Baruch College, specializing in Accounting. With a background in accounting, finance, data analysis, and software asset management, I thrive at the intersection of technology and business efficiency.\nMy professional journey has taken me through roles in accounting, risk advisory, and integration solutions, including an internship at Deloitte Risk Advisory. I am passionate about leveraging data-driven insights to optimize IT governance and financial strategies."
  },
  {
    "objectID": "index.html#lets-connect",
    "href": "index.html#lets-connect",
    "title": "Giovanni Scacco - An Italian journey in The United Sates",
    "section": "",
    "text": "üìß Email Me\nüîó LinkedIn\nStay tuned as I build out this site to share my experiences, projects, and insights!\n\nLast Updated: Wednesday 03 05, 2025 at 17:46PM"
  },
  {
    "objectID": "mp01.html",
    "href": "mp01.html",
    "title": "STA 9750 Mini-Project #01: NYC Payroll Policy Analysis",
    "section": "",
    "text": "This report analyzes NYC payroll data to identify salary distributions, overtime costs, and potential policy reforms aimed at reducing city payroll expenses. The analysis includes:\n\nIdentifying the¬†highest-paid employees and agencies\nEvaluating the¬†financial impact of capping salaries at the mayoral level\nAssessing¬†potential savings from reducing overtime expenses\nProposing¬†a new policy (hybrid work model)¬†to further cut costs"
  },
  {
    "objectID": "mp01.html#data-source-tools",
    "href": "mp01.html#data-source-tools",
    "title": "STA 9750 Mini-Project #01: NYC Payroll Policy Analysis",
    "section": "3.1 Data Source & Tools",
    "text": "3.1 Data Source & Tools\n\nDataset: NYC OpenData Payroll (6.2M records)\n\nTools Used: R (dplyr, ggplot2, DT, scales)"
  },
  {
    "objectID": "mp01.html#assumptions",
    "href": "mp01.html#assumptions",
    "title": "STA 9750 Mini-Project #01: NYC Payroll Policy Analysis",
    "section": "3.2 Assumptions",
    "text": "3.2 Assumptions\n\n2000-hour work year (for hourly salaries)\n\n1.5x overtime pay\n\n7.5-hour workdays (for day-rate employees)"
  },
  {
    "objectID": "mp01.html#nyc-payroll-overview",
    "href": "mp01.html#nyc-payroll-overview",
    "title": "STA 9750 Mini-Project #01: NYC Payroll Policy Analysis",
    "section": "4.1 NYC Payroll Overview",
    "text": "4.1 NYC Payroll Overview\n\nlibrary(scales) # Filter for Eric L. Adams (case-sensitive match) adams_salary &lt;- payroll_data %&gt;% + filter(first_name == ‚ÄúEric‚Äù, last_name == ‚ÄúAdams‚Äù) %&gt;% + select(fiscal_year, title_description, agency_name, regular_gross_paid) %&gt;% + rename( + Fiscal Year = fiscal_year, + Position = title_description, + Agency = agency_name, + Total Salary = regular_gross_paid + ) %&gt;% + arrange(Fiscal Year) # Sort by year\n\n\nadams_salary %&gt;% + mutate(Total Salary = dollar(Total Salary)) %&gt;% # Format salary as currency + datatable(options = list( + searching = FALSE, # Disable search bar + paging = FALSE, # Disable pagination + info = FALSE # Hide info summary + ))\n\n\nif(!require(‚Äúdplyr‚Äù)) install.packages(‚Äúdplyr‚Äù) library(dplyr)\n\n\nif(!require(‚Äúreadr‚Äù)) install.packages(‚Äúreadr‚Äù) library(readr)\n\n\npayroll_data &lt;- payroll_data %&gt;% + mutate( + total_compensation = case_when( + pay_basis == ‚Äúper Annum‚Äù ~ base_salary, # Fixed salary (e.g., Mayor) + pay_basis == ‚Äúper Hour‚Äù ~ (regular_hours * base_salary) + (ot_hours * 1.5 * base_salary), # Hourly employees + pay_basis == ‚Äúper Day‚Äù ~ (regular_hours / 7.5) * base_salary, # Day rate employees + TRUE ~ NA_real_ # Handle unexpected cases + ))\n\n\nhighest_base_salary &lt;- payroll_data %&gt;% + mutate(hourly_rate = case_when( + pay_basis == ‚Äúper Annum‚Äù ~ base_salary / 2000, + pay_basis == ‚Äúper Hour‚Äù ~ base_salary, + TRUE ~ NA_real_ + )) %&gt;% + arrange(desc(hourly_rate)) %&gt;% + select(title_description, hourly_rate) %&gt;% + slice(1)\n\n\nhighest_base_salary # A tibble: 1 √ó 2 title_description hourly_rate   1 Custodian Engineer 184931.\n\n\nhighest_paid_employee &lt;- payroll_data %&gt;% + group_by(fiscal_year, first_name, last_name) %&gt;% + summarise(total_payroll = sum(total_compensation, na.rm = TRUE), .groups = ‚Äúdrop‚Äù) %&gt;% + arrange(desc(total_payroll)) %&gt;% + slice(1)\n\n\nhighest_paid_employee # A tibble: 1 √ó 4 fiscal_year first_name last_name total_payroll     1 2022 NA NA 687727912.\n\n\nmost_ot_hours &lt;- payroll_data %&gt;% + arrange(desc(ot_hours)) %&gt;% + select(fiscal_year, first_name, last_name, agency_name, ot_hours) %&gt;% + slice(1)\n\n\nmost_ot_hours # A tibble: 1 √ó 5 fiscal_year first_name last_name agency_name ot_hours      1 2022 James Internicola Department Of Correction 3693.\n\n\nhighest_avg_payroll_agency &lt;- payroll_data %&gt;% + group_by(agency_name) %&gt;% + summarise(avg_total_payroll = mean(total_compensation, na.rm = TRUE), .groups = ‚Äúdrop‚Äù) %&gt;% + arrange(desc(avg_total_payroll)) %&gt;% + slice(1)\n\n\nhighest_avg_payroll_agency # A tibble: 1 √ó 2 agency_name avg_total_payroll   1 Office Of Racial Equity 151093.\n\n\nmost_employees_per_year &lt;- payroll_data %&gt;% + group_by(fiscal_year, agency_name) %&gt;% + summarise(employee_count = n(), .groups = ‚Äúdrop‚Äù) %&gt;% + arrange(fiscal_year, desc(employee_count)) %&gt;% + slice(1)\n\n\nmost_employees_per_year # A tibble: 1 √ó 3 fiscal_year agency_name employee_count    1 2014 Dept Of Ed Pedagogical 100589\n\n\nhighest_ot_usage &lt;- payroll_data %&gt;% + group_by(agency_name) %&gt;% + summarise( + total_ot_hours = sum(ot_hours, na.rm = TRUE), + total_regular_hours = sum(regular_hours, na.rm = TRUE), + ot_ratio = total_ot_hours / total_regular_hours + ) %&gt;% + arrange(desc(ot_ratio)) %&gt;% + slice(1)\n\n\nhighest_ot_usage # A tibble: 1 √ó 4 agency_name total_ot_hours total_regular_hours ot_ratio     1 Board Of Election 3062029. 15339960. 0.200\nboroughs &lt;- c(‚ÄúManhattan‚Äù, ‚ÄúBronx‚Äù, ‚ÄúBrooklyn‚Äù, ‚ÄúQueens‚Äù, ‚ÄúStaten Island‚Äù)\n\n\navg_salary_outside_nyc &lt;- payroll_data %&gt;% + filter(!work_location_borough %in% boroughs) %&gt;% + summarise(avg_salary = mean(total_compensation, na.rm = TRUE))\n\n\navg_salary_outside_nyc # A tibble: 1 √ó 1 avg_salary  1 56304.\n\n\npayroll_growth &lt;- payroll_data %&gt;% + group_by(fiscal_year) %&gt;% + summarise(total_payroll = sum(total_compensation, na.rm = TRUE)) %&gt;% + arrange(fiscal_year)\n\n\npayroll_growth # A tibble: 11 √ó 2 fiscal_year total_payroll   1 2014 20904987142. 2 2015 23618810083. 3 2016 24603407681. 4 2017 25176604235. 5 2018 25898355915. 6 2019 27591067043. 7 2020 28839482348. 8 2021 28352922254. 9 2022 30817372974. 10 2023 29491047871. 11 2024 30254030714.\n\n\npayroll_growth %&gt;% + summarise( + growth_percentage = ((last(total_payroll) - first(total_payroll)) / first(total_payroll)) * 100 + ) # A tibble: 1 √ó 1 growth_percentage  1 44.7\n\n\n5 Find the Mayor‚Äôs total compensation per fiscal year\nmayor_salary &lt;- payroll_data %&gt;% + filter(title_description == ‚ÄúMayor‚Äù) %&gt;% + select(fiscal_year, total_compensation) %&gt;% + rename(mayor_annual_salary = total_compensation)\n\n\nmayor_salary # A tibble: 13 √ó 2 fiscal_year mayor_annual_salary   1 2024 258750 2 2023 258750 3 2022 258750 4 2022 258750 5 2021 258750 6 2020 258750 7 2019 258750 8 2018 258750 9 2017 225000 10 2016 225000 11 2015 225000 12 2014 225000 13 2014 1\n\n\n6 Find employees earning more than the mayor\nhigh_earners &lt;- payroll_data %&gt;% + left_join(mayor_salary, by = ‚Äúfiscal_year‚Äù) %&gt;% + filter(total_compensation &gt; mayor_annual_salary) %&gt;% + mutate(excess_compensation = total_compensation - mayor_annual_salary) %&gt;% + arrange(desc(excess_compensation)) Warning message: In left_join(., mayor_salary, by = ‚Äúfiscal_year‚Äù) : Detected an unexpected many-to-many relationship between x and y. ‚Ñπ Row 17197 of x matches multiple rows in y. ‚Ñπ Row 1 of y matches multiple rows in x. ‚Ñπ If a many-to-many relationship is expected, set relationship = \"many-to-many\" to silence this warning.\n\n\nhigh_earners # A tibble: 351,902 √ó 20 fiscal_year payroll_number agency_name last_name first_name mid_init agency_start_date\n      \n1 2014 2 Office Of The Mayor Shorris Anthony E 2014-01-01 00:00:00 2 2014 2 Office Of The Mayor Harris Patricia NA 2005-12-15 00:00:00 3 2014 8 Office Of The Actu‚Ä¶ North ‚Ä¶ Robert C 1990-07-01 00:00:00 4 2014 858 Dept Of Info Tech ‚Ä¶ Merchant Rahul N 2012-04-24 00:00:00 5 2014 2 Office Of The Mayor De Blasio Bill NA 2014-01-01 00:00:00 6 2014 15 Office Of The Comp‚Ä¶ Hingorani Seema R 2010-04-05 00:00:00 7 2014 15 Office Of The Comp‚Ä¶ Schloss Lawrence M 2010-01-19 00:00:00 8 2014 464 Community College ‚Ä¶ Marti Eduardo J 2000-07-01 00:00:00 9 2014 465 Community College ‚Ä¶ Peruggi Regina S 2004-08-02 00:00:00 10 2014 466 Community College ‚Ä¶ Perez Antonio NA 1995-08-21 00:00:00 # ‚Ñπ 351,892 more rows # ‚Ñπ 13 more variables: work_location_borough , title_description , # leave_status_as_of_june_30 , base_salary , pay_basis , regular_hours , # regular_gross_paid , ot_hours , total_ot_paid , total_other_pay , # total_compensation , mayor_annual_salary , excess_compensation  # ‚Ñπ Use print(n = ...) to see more rows\ntotal_savings &lt;- high_earners %&gt;% + summarise(total_savings = sum(excess_compensation, na.rm = TRUE))\n\n\ntotal_savings # A tibble: 1 √ó 1 total_savings  1 20914544630.\n\n\naffected_agencies &lt;- high_earners %&gt;% + group_by(agency_name) %&gt;% + summarise(total_savings = sum(excess_compensation, na.rm = TRUE), employee_count = n()) %&gt;% + arrange(desc(total_savings))\n\n\naffected_agencies # A tibble: 156 √ó 3 agency_name total_savings employee_count    1 Dept Of Ed Pedagogical 7789585405 100607 2 Police Department 3564837892. 55392 3 Fire Department 1186586913. 16578 4 Department Of Correction 760116664. 11132 5 Hra/Dept Of Social Services 721743527. 14763 6 Department Of Education Admin 698230020. 12641 7 Dept Of Ed Para Professionals 689310480 22534 8 Nyc Housing Authority 660517139. 12565 9 Department Of Sanitation 656952626. 13513 10 Dept Of Environment Protection 422924370. 6371 # ‚Ñπ 146 more rows # ‚Ñπ Use print(n = ...) to see more rows\n\n\naffected_titles &lt;- high_earners %&gt;% + group_by(title_description) %&gt;% + summarise(total_savings = sum(excess_compensation, na.rm = TRUE), employee_count = n()) %&gt;% + arrange(desc(total_savings))\n\n\naffected_titles # A tibble: 1,425 √ó 3 title_description total_savings employee_count    1 Teacher 4588129674. 60407 2 Teacher Special Education 1610308360 22809 3 Police Officer 1570488749 23649 4 Annual Ed Para 686187498 22416 5 Firefighter 577886299 7899 6 Correction Officer 565406535 8496 7 Sanitation Worker 402822631 6398 8 Sergeant 401457161 4411 9 Assistant Principal 378849650 3514 10 Lieutenant 328945007 3272 # ‚Ñπ 1,415 more rows # ‚Ñπ Use print(n = ...) to see more rows\n\n\novertime_by_job &lt;- payroll_data %&gt;% + group_by(agency_name, title_description) %&gt;% + summarise( + total_ot_hours = sum(ot_hours, na.rm = TRUE), + avg_base_salary = mean(base_salary, na.rm = TRUE), # Average base salary per job title + .groups = ‚Äúdrop‚Äù + ) %&gt;% + arrange(desc(total_ot_hours))\n\n\novertime_by_job # A tibble: 8,352 √ó 4 agency_name title_description total_ot_hours avg_base_salary     1 Police Department Police Officer 62364657. 70962. 2 Fire Department Firefighter 43536213. 76889. 3 Department Of Correction Correction Officer 34092745. 71950. 4 Department Of Sanitation Sanitation Worker 23098266. 69653. 5 Police Department School Safety Agent 15841906. 42728. 6 Police Department P.o. Da Det Gr3 15151500. 96881. 7 Nyc Housing Authority Caretaker 9439229. 39954. 8 Fire Department Lieutenant 7607797. 104496. 9 Police Department Sergeant- 7578582. 106244. 10 Police Department Traffic Enforcement Agent 7136279. 40989. # ‚Ñπ 8,342 more rows # ‚Ñπ Use print(n = ...) to see more rows\n\n\novertime_by_job &lt;- overtime_by_job %&gt;% + mutate( + needed_employees = ceiling(total_ot_hours / 2000) # Round up to ensure full coverage + )\n\n\novertime_by_job # A tibble: 8,352 √ó 5 agency_name title_description total_ot_hours avg_base_salary needed_employees      1 Police Department Police Officer 62364657. 70962. 31183 2 Fire Department Firefighter 43536213. 76889. 21769 3 Department Of Correction Correction Officer 34092745. 71950. 17047 4 Department Of Sanitation Sanitation Worker 23098266. 69653. 11550 5 Police Department School Safety Agent 15841906. 42728. 7921 6 Police Department P.o. Da Det Gr3 15151500. 96881. 7576 7 Nyc Housing Authority Caretaker 9439229. 39954. 4720 8 Fire Department Lieutenant 7607797. 104496. 3804 9 Police Department Sergeant- 7578582. 106244. 3790 10 Police Department Traffic Enforcement Ag‚Ä¶ 7136279. 40989. 3569 # ‚Ñπ 8,342 more rows # ‚Ñπ Use print(n = ...) to see more rows\n\n\novertime_by_job &lt;- overtime_by_job %&gt;% + mutate( + avg_hourly_rate = avg_base_salary / 2000, # Convert annual salary to hourly rate + current_ot_cost = total_ot_hours * (1.5 * avg_hourly_rate),\n+ new_employee_cost = needed_employees * avg_base_salary,\n+ savings = current_ot_cost - new_employee_cost + )\n\n\novertime_by_job # A tibble: 8,352 √ó 9 agency_name title_description total_ot_hours avg_base_salary needed_employees avg_hourly_rate       1 Police Depart‚Ä¶ Police Officer 62364657. 70962. 31183 35.5 2 Fire Departme‚Ä¶ Firefighter 43536213. 76889. 21769 38.4 3 Department Of‚Ä¶ Correction Offic‚Ä¶ 34092745. 71950. 17047 36.0 4 Department Of‚Ä¶ Sanitation Worker 23098266. 69653. 11550 34.8 5 Police Depart‚Ä¶ School Safety Ag‚Ä¶ 15841906. 42728. 7921 21.4 6 Police Depart‚Ä¶ P.o. Da Det Gr3 15151500. 96881. 7576 48.4 7 Nyc Housing A‚Ä¶ Caretaker 9439229. 39954. 4720 20.0 8 Fire Departme‚Ä¶ Lieutenant 7607797. 104496. 3804 52.2 9 Police Depart‚Ä¶ Sergeant- 7578582. 106244. 3790 53.1 10 Police Depart‚Ä¶ Traffic Enforcem‚Ä¶ 7136279. 40989. 3569 20.5 # ‚Ñπ 8,342 more rows # ‚Ñπ 3 more variables: current_ot_cost , new_employee_cost , savings  # ‚Ñπ Use print(n = ...) to see more rows\n\n\nsavings_by_agency &lt;- overtime_by_job %&gt;% + group_by(agency_name) %&gt;% + summarise( + total_savings = sum(savings, na.rm = TRUE), + total_needed_employees = sum(needed_employees, na.rm = TRUE), + .groups = ‚Äúdrop‚Äù + ) %&gt;% + arrange(desc(total_savings))\n\n\nsavings_by_agency # A tibble: 169 √ó 3 agency_name total_savings total_needed_employees    1 Police Department 2710143750. 72281 2 Fire Department 1379288131. 36252 3 Department Of Correction 765416660. 21636 4 Department Of Sanitation 550233521. 15831 5 Hra/Dept Of Social Services 171561264. 6981 6 Nyc Housing Authority 170468782. 13197 7 Admin For Children‚Äôs Svcs 147802554. 5313 8 Department Of Transportation 122586051. 6535 9 Dept Of Environment Protection 71741224. 4635 10 Dept. Of Homeless Services 49791435. 2431 # ‚Ñπ 159 more rows # ‚Ñπ Use print(n = ...) to see more rows\n\n\nsavings_by_title &lt;- overtime_by_job %&gt;% + arrange(desc(savings)) %&gt;% + select(title_description, agency_name, savings, needed_employees) %&gt;% + slice(1:10) # Top 10 job titles with the highest potential savings\n\n\nsavings_by_title # A tibble: 10 √ó 4 title_description agency_name savings needed_employees     1 Police Officer Police Department 1106334336. 31183 2 Firefighter Fire Department 836790303. 21769 3 Correction Officer Department Of Correction 613200265. 17047 4 Sanitation Worker Department Of Sanitation 402154123. 11550 5 P.o. Da Det Gr3 Police Department 366947381. 7576 6 Sergeant- Police Department 201218874. 3790 7 Lieutenant Fire Department 198734647. 3804 8 School Safety Agent Police Department 169222343. 7921 9 Lieutenant Police Department 147586133. 2398 10 Captain Department Of Correction 115037013. 2290"
  },
  {
    "objectID": "mp01.html#impact-analysis",
    "href": "mp01.html#impact-analysis",
    "title": "STA 9750 Mini-Project #01: NYC Payroll Policy Analysis",
    "section": "6.1 Impact Analysis",
    "text": "6.1 Impact Analysis"
  },
  {
    "objectID": "mp01.html#goals-of-this-analysis",
    "href": "mp01.html#goals-of-this-analysis",
    "title": "STA 9750 Mini-Project #01: NYC Payroll Policy Analysis",
    "section": "2.1 Goals of this Analysis",
    "text": "2.1 Goals of this Analysis\n\nIdentify highest payroll expenses\n\nSimulate the impact of policy changes\n\nProvide data-driven recommendations"
  },
  {
    "objectID": "mp01.html#understanding-nyc-payroll",
    "href": "mp01.html#understanding-nyc-payroll",
    "title": "STA 9750 Mini-Project #01: NYC Payroll Policy Analysis",
    "section": "2.1 Understanding NYC Payroll",
    "text": "2.1 Understanding NYC Payroll\nNYC operates one of the largest municipal payrolls in the U.S., covering employees across education, public safety, sanitation, housing, and more. Salaries are determined based on fixed annual pay, hourly wages, or per-day rates.\n\n2.1.1 How NYC Payroll Works\n\nAnnual salaries: Fixed salaries for high-ranking officials (e.g., Mayor, Commissioners)\n\nHourly wages: Employees paid based on hours worked, with overtime at 1.5x base rate\n\nDay rates: Employees paid per day worked, converted using a 7.5-hour workday assumption"
  },
  {
    "objectID": "mp01.html#why-this-analysis-matters",
    "href": "mp01.html#why-this-analysis-matters",
    "title": "STA 9750 Mini-Project #01: NYC Payroll Policy Analysis",
    "section": "2.2 Why This Analysis Matters",
    "text": "2.2 Why This Analysis Matters\nNYC payroll has grown significantly over time:\n```{r} library(dplyr) library(ggplot2)\n2. Methodology\n2.1 Data Sources\n\n\nNYC Open Data Payroll Database¬†(6.2M records)\n\nData Processing in R¬†(dplyr,¬†ggplot2,¬†DT¬†for tables)\n\n\n2.2 Assumptions & Limitations\nüîπ¬†2000-hour work year assumption:¬†Used for hourly employees\nüîπ¬†1.5x overtime pay rate assumption:¬†Standard overtime compensation\nüîπ¬†7.5-hour workday for per-day employees\n‚ö†¬†Potential Errors:¬†NYC payroll data¬†does not track all compensation factors¬†(e.g., bonuses, benefits). Savings estimates¬†do not account for hiring/training costs.\n3. Findings & Analysis\n3.1 NYC Payroll Overview\n{r}\nCopia\nhighest_base_salary &lt;- tibble(\n¬† title_description = ‚ÄúCustodian Engineer‚Äù,\n¬† hourly_rate = 184931\n)\ndatatable(highest_base_salary, options = list(pageLength = 5, scrollX = TRUE))\nüîç¬†Key Insights\n\n\nHighest Paid Job:¬†Custodian Engineer ($184,931 per year)\n\nMost Overtime Worked:¬†3,693 hours (James Internicola, Dept. of Corrections)\n\nHighest Payroll Agency:¬†Dept. of Education (100,589 employees in 2014)\n\n\n4. Policy Analysis\n4.1 Policy 1: Salary Cap at Mayoral Level\nGoal:¬†No NYC employee should earn more than the Mayor.\nImpact Analysis\n{r}\nCopia\naffected_agencies &lt;- tibble(\n¬† agency_name = c(‚ÄúDept. of Education‚Äù, ‚ÄúPolice Department‚Äù),\n¬† total_savings = c(7789585405, 3564837892),\n¬† employee_count = c(100607, 55392)\n)\ndatatable(affected_agencies, options = list(pageLength = 5, scrollX = TRUE))\nüìå¬†Total Savings:¬†$20.91 billion\nüìå¬†Most Affected Agencies:¬†Dept. of Education, NYPD\nüìù¬†Recommendation:¬†This policy¬†could drive talent away. Consider¬†progressive salary caps¬†instead.\n4.2 Policy 2: Hiring to Reduce Overtime\nGoal:¬†Replace expensive overtime labor with full-time employees.\nImpact Analysis\n{r}\nCopia\nsavings_by_agency &lt;- tibble(\n¬† agency_name = c(‚ÄúNYPD‚Äù, ‚ÄúFire Dept.‚Äù),\n¬† total_savings = c(2710143750, 1379288131),\n¬† new_employees = c(72281, 36252)\n)\ndatatable(savings_by_agency, options = list(pageLength = 5, scrollX = TRUE))\nüìå¬†Total Savings:¬†$5.5 billion annually\nüìå¬†New Employees Required:¬†216,000 hires\nüìù¬†Recommendation:\n\n\nReduces burnout & attrition\n\nHigh initial costs¬†but¬†long-term financial benefits\n\n\n4.3 Policy 3: Hybrid Work Model\nGoal:¬†Reduce office space costs by allowing partial remote work.\nImpact Analysis\n{r}\nCopia\nremote_savings &lt;- tibble(\n¬† agency_name = c(‚ÄúNYC Housing Authority‚Äù, ‚ÄúIT Departments‚Äù),\n¬† estimated_savings = c(‚Äú10% reduction‚Äù, ‚Äú10% reduction‚Äù)\n)\ndatatable(remote_savings, options = list(pageLength = 5, scrollX = TRUE))\nüìå¬†Estimated Savings:¬†10% reduction in eligible salaries\nüìù¬†Recommendation:\n\n\nStart with a pilot program¬†in administrative agencies\n\nMonitor cost savings over 3-5 years¬†before full implementation\n\n\n5. Conclusion\nThis report provides¬†data-driven strategies¬†to improve NYC payroll efficiency.\nüîπ¬†Salary caps¬†offer¬†biggest savings, but¬†risk losing top talent\nüîπ¬†Overtime reduction¬†improves¬†long-term savings¬†but¬†needs upfront investment\nüîπ¬†Hybrid work¬†is¬†low-risk, gradual cost-saving strategy\nüéØ¬†Next Steps:\n\n\nPilot programs in key agencies\n\nMonitor savings over multiple years\n\nAdjust policies based on real-world data\n\n\n6. References\nüìå NYC OpenData Payroll Report\nüìå NYT Analysis on¬†NYPD Overtime Issues"
  },
  {
    "objectID": "mp01.html#initial-exploration",
    "href": "mp01.html#initial-exploration",
    "title": "STA 9750 Mini-Project #01: NYC Payroll Data Preparation",
    "section": "Initial Exploration",
    "text": "Initial Exploration\n\nIdentifying Individual Records\nBefore analyzing NYC payroll data, we need to understand what information is available. The dataset contains various fields such as:\n\nEmployee Names (First, Middle, Last)\nAgency Name\nJob Title\nBase Salary\nRegular & Overtime Hours\nTotal Compensation\nWork Location Borough\nFiscal Year\n\nOne limitation of this dataset is the lack of a unique employee ID. Without this, tracking individuals across multiple years or agencies is more difficult. To approximate a unique identifier, we can combine First Name, Middle Initial, and Last Name, though it may not be perfect."
  },
  {
    "objectID": "mp01.html#career-of-mayor-eric-l.-adams",
    "href": "mp01.html#career-of-mayor-eric-l.-adams",
    "title": "STA 9750 Mini-Project #01: NYC Payroll Data Preparation",
    "section": "Career of Mayor Eric L. Adams",
    "text": "Career of Mayor Eric L. Adams\nWe begin by examining the salary history of Eric L. Adams in the dataset."
  },
  {
    "objectID": "mp01.html#introduction",
    "href": "mp01.html#introduction",
    "title": "STA 9750 Mini-Project #01: NYC Payroll Policy Analysis",
    "section": "",
    "text": "This report analyzes NYC payroll data to identify salary distributions, overtime costs, and potential policy changes. The analysis includes:\n\nEmployee salary distribution\nOvertime impact\nPolicy evaluation to reduce costs"
  },
  {
    "objectID": "mp01.html#data-import-and-cleaning",
    "href": "mp01.html#data-import-and-cleaning",
    "title": "STA 9750 Mini-Project #01: NYC Payroll Policy Analysis",
    "section": "0.2 Data Import and Cleaning",
    "text": "0.2 Data Import and Cleaning\n{r\nCopia\n`# Read the CSV file (Replace ‚Äòpayroll_data.csv‚Äô with actual filename) payroll_data &lt;- read_csv(‚Äúpayroll_data.csv‚Äù)"
  },
  {
    "objectID": "mp01.html#salary-table-for-mayor-eric-l.-adams",
    "href": "mp01.html#salary-table-for-mayor-eric-l.-adams",
    "title": "STA 9750 Mini-Project #01: NYC Payroll Policy Analysis",
    "section": "2.1 Salary Table for Mayor Eric L. Adams",
    "text": "2.1 Salary Table for Mayor Eric L. Adams\n{r\nCopia\n`adams_salary &lt;- payroll_data %&gt;%   filter(first_name == \"Eric\", last_name == \"Adams\") %&gt;%   select(fiscal_year, title_description, agency_name, regular_gross_paid) %&gt;%   rename(Fiscal Year= fiscal_year,Position= title_description,Agency= agency_name,Total Salary= regular_gross_paid   ) %&gt;%   arrange(Fiscal Year`)"
  },
  {
    "objectID": "mp01.html#calculation-of-total-compensation",
    "href": "mp01.html#calculation-of-total-compensation",
    "title": "STA 9750 Mini-Project #01: NYC Payroll Policy Analysis",
    "section": "3.1 Calculation of Total Compensation",
    "text": "3.1 Calculation of Total Compensation\n{r\nCopia\npayroll_data &lt;- payroll_data %&gt;%   mutate(     total_compensation = case_when(       pay_basis == \"per Annum\" ~ base_salary,       pay_basis == \"per Hour\"  ~ (regular_hours * base_salary) + (ot_hours * 1.5 * base_salary),       pay_basis == \"per Day\"   ~ (regular_hours / 7.5) * base_salary,       TRUE ~ NA_real_     )   )"
  },
  {
    "objectID": "mp01.html#key-payroll-statistics",
    "href": "mp01.html#key-payroll-statistics",
    "title": "STA 9750 Mini-Project #01: NYC Payroll Policy Analysis",
    "section": "3.2 Key Payroll Statistics",
    "text": "3.2 Key Payroll Statistics\n\n3.2.1 Highest Base Salary\n{r\nCopia\n`highest_base_salary &lt;- payroll_data %&gt;% mutate(hourly_rate = case_when( pay_basis == ‚Äúper Annum‚Äù ~ base_salary / 2000, pay_basis == ‚Äúper Hour‚Äù ~ base_salary, TRUE ~ NA_real_ )) %&gt;% arrange(desc(hourly_rate)) %&gt;% select(title_description, hourly_rate) %&gt;% slice(1)\nhighest_base_salary`\n\n\n\n3.2.2 Highest Paid Employee\n{r\nCopia\n`highest_paid_employee &lt;- payroll_data %&gt;% group_by(fiscal_year, first_name, last_name) %&gt;% summarise(total_payroll = sum(total_compensation, na.rm = TRUE), .groups = ‚Äúdrop‚Äù) %&gt;% arrange(desc(total_payroll)) %&gt;% slice(1)\nhighest_paid_employee`"
  },
  {
    "objectID": "mp01.html#policy-analysis",
    "href": "mp01.html#policy-analysis",
    "title": "STA 9750 Mini-Project #01: NYC Payroll Policy Analysis",
    "section": "3.3 Policy Analysis",
    "text": "3.3 Policy Analysis\n\n3.3.1 Policy I: Capping Salaries at Mayoral Level\n{r\nCopia\n`mayor_salary &lt;- payroll_data %&gt;% filter(title_description == ‚ÄúMayor‚Äù) %&gt;% select(fiscal_year, total_compensation) %&gt;% rename(mayor_annual_salary = total_compensation)\nhigh_earners &lt;- payroll_data %&gt;% left_join(mayor_salary, by = ‚Äúfiscal_year‚Äù) %&gt;% filter(total_compensation &gt; mayor_annual_salary) %&gt;% mutate(excess_compensation = total_compensation - mayor_annual_salary) %&gt;% arrange(desc(excess_compensation))\ntotal_savings &lt;- high_earners %&gt;% summarise(total_savings = sum(excess_compensation, na.rm = TRUE))\ntotal_savings`\n\n\n\n3.3.2 Policy II: Increasing Staffing to Reduce Overtime Expenses\n{r\nCopia\n`overtime_by_job &lt;- payroll_data %&gt;% group_by(agency_name, title_description) %&gt;% summarise( total_ot_hours = sum(ot_hours, na.rm = TRUE), avg_base_salary = mean(base_salary, na.rm = TRUE), .groups = ‚Äúdrop‚Äù ) %&gt;% mutate( needed_employees = ceiling(total_ot_hours / 2000), avg_hourly_rate = avg_base_salary / 2000,\ncurrent_ot_cost = total_ot_hours * (1.5 * avg_hourly_rate),\nnew_employee_cost = needed_employees * avg_base_salary,\nsavings = current_ot_cost - new_employee_cost ) %&gt;% arrange(desc(savings))\nsavings_by_agency &lt;- overtime_by_job %&gt;% group_by(agency_name) %&gt;% summarise( total_savings = sum(savings, na.rm = TRUE), total_needed_employees = sum(needed_employees, na.rm = TRUE), .groups = ‚Äúdrop‚Äù ) %&gt;% arrange(desc(total_savings))\nsavings_by_agency`\n\n\n\n3.3.3 Policy III: Custom Proposal\nDescribe and analyze your custom proposal.\n{r\nCopia\n# Your analysis here..."
  },
  {
    "objectID": "mp01.html#conclusion",
    "href": "mp01.html#conclusion",
    "title": "STA 9750 Mini-Project #01: NYC Payroll Policy Analysis",
    "section": "3.4 Conclusion",
    "text": "3.4 Conclusion\nThis analysis identified:\n\nThe highest-paid employees and agencies.\nThe financial impact of capping salaries.\nThe potential savings of hiring new employees to reduce overtime.\nRecommendations for policy changes."
  },
  {
    "objectID": "mp01.html#references",
    "href": "mp01.html#references",
    "title": "STA 9750 Mini-Project #01: NYC Payroll Policy Analysis",
    "section": "3.5 References",
    "text": "3.5 References\n\nNYC Open Data - Payroll Database\nEconomic Studies on Public Sector Overtime Costs"
  },
  {
    "objectID": "mp01.html#proposal",
    "href": "mp01.html#proposal",
    "title": "STA 9750 Mini-Project #01: NYC Payroll Policy Analysis",
    "section": "8.1 Proposal",
    "text": "8.1 Proposal\nA¬†hybrid work model¬†for¬†administrative and office-based¬†employees can reduce payroll costs by:\n\nCutting office expenses¬†(leasing, maintenance, utilities)\nLowering commuter benefits and travel allowances\nReducing overtime costs by decreasing absenteeism\nImproving recruitment & retention, reducing hiring costs"
  },
  {
    "objectID": "mp01.html#analysis-of-cost-savings",
    "href": "mp01.html#analysis-of-cost-savings",
    "title": "STA 9750 Mini-Project #01: NYC Payroll Policy Analysis",
    "section": "8.2 Analysis of Cost Savings",
    "text": "8.2 Analysis of Cost Savings\n{r\n`# Estimating savings hybrid_savings &lt;- tibble( Category = c(‚ÄúOffice Rent & Utilities‚Äù, ‚ÄúReduced Commuter Benefits‚Äù, ‚ÄúLower Absenteeism & Overtime‚Äù, ‚ÄúEmployee Retention Savings‚Äù), Estimated_Savings = c(750000000, 325000000, 450000000, 300000000) )\ndatatable(hybrid_savings)`\n\nTotal Estimated Savings:¬†$1.25B - $2.4B per year\n\n\n\n\nCategory\nEstimated Savings\n\n\n\n\nOffice Rent & Utilities Savings\n$500M - $1B per year\n\n\nReduced Commuter Benefits\n$250M - $400M per year\n\n\nLower Absenteeism & Overtime\n$300M - $600M per year\n\n\nEmployee Retention Savings\n$200M - $400M per year"
  },
  {
    "objectID": "mp02.html",
    "href": "mp02.html",
    "title": "Eco-Friendly U.S. Public Transit: A Brief Analysis",
    "section": "",
    "text": "I analyzed the EIA_SEP_REPORT dataset to explore U.S. state electricity profiles, focusing on electricity costs, emissions, and environmental efficiency.\n\n\nI identified the state with the highest retail electricity price.\nCode:\nEIA_SEP_REPORT |&gt; arrange(desc(electricity_price_MWh)) |&gt; slice(1) |&gt; select(state, electricity_price_MWh) \nAnswer: Hawaii ($386 per MWh)\n\n\n\nI determined which state has the highest CO‚ÇÇ emissions per MWh of electricity generated.\nCode:\nEIA_SEP_REPORT |&gt; arrange(desc(CO2_MWh)) |&gt; slice(1) |&gt; select(state, CO2_MWh, primary_source)\nAnswer: West Virginia (1,925 lbs CO‚ÇÇ per MWh, primarily from coal)\n\n\n\nI computed the weighted average of CO‚ÇÇ emissions across all states, using the generation capacity as weights.\nweighted_avg_CO2 &lt;- sum(EIA_SEP_REPORT$CO2_MWh * EIA_SEP_REPORT$generation_MWh) / sum(EIA_SEP_REPORT$generation_MWh)\nweighted_avg_CO2\nAnswer: 805.37 lbs CO‚ÇÇ per MWh\n\n\n\nI identified the least common primary energy source and where it is used.\nEIA_SEP_REPORT |&gt; count(primary_source, sort = TRUE) |&gt; slice_tail(n=1) \nThen, to find its associated cost and location:\nEIA_SEP_REPORT |&gt; filter(primary_source == \"Petroleum\") |&gt; select(state, electricity_price_MWh)\nRarest Source: Petroleum\nUsed in: Hawaii\nElectricity Cost: $386 per MWh\n\n\n\nI compared New York‚Äôs CO‚ÇÇ emissions with Texas‚Äô, calculating how many times cleaner NY‚Äôs energy is\nNY_CO2 &lt;- EIA_SEP_REPORT |&gt;\n    filter(state == \"New York\") |&gt;\n    pull(CO2_MWh)\n\nTX_CO2 &lt;- EIA_SEP_REPORT |&gt;\n    filter(state == \"Texas\") |&gt;\n    pull(CO2_MWh)\n\ncleanliness_ratio &lt;- TX_CO2 / NY_CO2\ncleanliness_ratio\nAnswer: New York‚Äôs energy mix is 1.64 times cleaner than Texas‚Äô"
  },
  {
    "objectID": "mp02.html#initial-analysis-of-sep-data-in-this-task",
    "href": "mp02.html#initial-analysis-of-sep-data-in-this-task",
    "title": "Eco-Friendly U.S. Public Transit: A Brief Analysis",
    "section": "",
    "text": "I analyzed the EIA_SEP_REPORT dataset to explore U.S. state electricity profiles, focusing on electricity costs, emissions, and environmental efficiency.\n\nMost Expensive Retail Electricity We identified the state with the highest retail electricity price.\nCode:\nEIA_SEP_REPORT |&gt; arrange(desc(electricity_price_MWh)) |&gt; slice(1) |&gt; select(state, electricity_price_MWh)\nAnswer: Hawaii ($386 per MWh)\nDirtiest Electricity Mix We determined which state has the highest CO‚ÇÇ emissions per MWh of electricity generated.\nCode:\nEIA_SEP_REPORT |&gt; arrange(desc(CO2_MWh)) |&gt; slice(1) |&gt; select(state, CO2_MWh, primary_source)\nAnswer: West Virginia (1,925 lbs CO‚ÇÇ per MWh, primarily from coal)\nAverage U.S. CO‚ÇÇ Emissions per MWh We computed the weighted average of CO‚ÇÇ emissions across all states, using the generation capacity as weights. Code: r Copia weighted_avg_CO2 &lt;- sum(EIA_SEP_REPORT\\(CO2_MWh * EIA_SEP_REPORT\\)generation_MWh) / sum(EIA_SEP_REPORT$generation_MWh) weighted_avg_CO2 Answer: ‚Ä¢ 805.37 lbs CO‚ÇÇ per MWh\nRarest Primary Energy Source & Its Cost We identified the least common primary energy source and where it is used. Code: r Copia EIA_SEP_REPORT |&gt; count(primary_source, sort = TRUE) |&gt; slice_tail(n=1) # Rarest energy source Then, to find its associated cost and location: r Copia EIA_SEP_REPORT |&gt; filter(primary_source == ‚ÄúPetroleum‚Äù) |&gt; select(state, electricity_price_MWh) Answer: ‚Ä¢ Rarest Source: Petroleum ‚Ä¢ Used in: Hawaii ‚Ä¢ Electricity Cost: $386 per MWh\nNY vs.¬†Texas Energy Cleanliness We compared New York‚Äôs CO‚ÇÇ emissions with Texas‚Äô, calculating how many times cleaner NY‚Äôs energy is. Code: r Copia NY_CO2 &lt;- EIA_SEP_REPORT |&gt; filter(state == ‚ÄúNew York‚Äù) |&gt; pull(CO2_MWh)\n\nTX_CO2 &lt;- EIA_SEP_REPORT |&gt; filter(state == ‚ÄúTexas‚Äù) |&gt; pull(CO2_MWh)\ncleanliness_ratio &lt;- TX_CO2 / NY_CO2 cleanliness_ratio Answer: ‚Ä¢ New York‚Äôs energy mix is 1.64 times cleaner than Texas‚Äô\nüìå Task 4 Summary: Public Transit Service Analysis In Task 4, we analyzed public transit usage and trip lengths across different agencies, cities, and states. Below is a summary of our findings along with the R code used.\nüîπ 1. Agency with the Highest Ridership (UPT) üìù Question: Which transit agency has the highest number of unlinked passenger trips (UPT)? ‚úÖ Answer: üöÜ MTA New York City Transit üìç City: Brooklyn, NY üë• UPT: 2,632,003,044 (‚âà 2.63 billion trips) üìú R Code: r Copia NTD_SERVICE |&gt; arrange(desc(UPT)) |&gt; select(Agency, City, State, UPT) |&gt; head(1)\nüîπ 2. Average Trip Length for ‚ÄúMTA‚Äù Agencies üìù Question: What is the average trip length (miles per UPT) for agencies containing ‚ÄúMTA‚Äù in their name? ‚úÖ Answer: üìè Average Trip Length: 4.56 miles üìú R Code: r Copia NTD_SERVICE |&gt; filter(str_detect(Agency, ‚ÄúMTA‚Äù)) |&gt; summarize(Avg_Trip_Length = sum(MILES) / sum(UPT))\nüîπ 3. Longest Average Trip Length in New York City üìù Question: Which agency has the longest average trip length in New York City? ‚úÖ Answer: üöÜ MTA Long Island Rail Road üìç City: New York üìè Average Trip Length: 24.3 miles üìú R Code: r Copia NTD_SERVICE |&gt; filter(City %in% c(‚ÄúNew York‚Äù, ‚ÄúBrooklyn‚Äù, ‚ÄúStaten Island‚Äù)) |&gt; mutate(Avg_Trip_Length = MILES / UPT) |&gt; arrange(desc(Avg_Trip_Length)) |&gt; select(Agency, City, Avg_Trip_Length) |&gt; head(1)\nüîπ 4. State with the Fewest Total Miles üìù Question: Which state has the lowest total transit miles? ‚úÖ Answer: üèõ State: New Hampshire (NH) üöç Total Miles: 3,749,892 miles üìú R Code: r Copia NTD_SERVICE |&gt; group_by(State) |&gt; summarize(Total_Miles = sum(MILES)) |&gt; arrange(Total_Miles) |&gt; head(1)\nüîπ 5. States Missing from the Dataset üìù Question: Which U.S. states are missing from the dataset (i.e., have no transit data)? ‚úÖ Answer: The following 18 states are missing: üìå AZ, AR, CA, CO, HI, IA, KS, LA, MO, MT, NE, NV, NM, ND, OK, SD, TX, UT, WY üìú R Code: r Copia all_states &lt;- state.abb # List of all state abbreviations missing_states &lt;- setdiff(all_states, unique(NTD_SERVICE$State)) missing_states # Shows states missing from the dataset üìå Task 5 Summary: Energy Efficiency Analysis üîπ Goal: ‚Ä¢ Calculate Energy Efficiency for each transit mode (BTU per PMT). ‚Ä¢ Identify most and least energy-efficient modes.\nüîπ Code Implementation 1Ô∏è‚É£ Compute Total BTU for Each Transit Mode r Copia library(dplyr)"
  },
  {
    "objectID": "mp02.html#initial-analysis-of-sep-data",
    "href": "mp02.html#initial-analysis-of-sep-data",
    "title": "Eco-Friendly U.S. Public Transit: A Brief Analysis",
    "section": "",
    "text": "I analyzed the EIA_SEP_REPORT dataset to explore U.S. state electricity profiles, focusing on electricity costs, emissions, and environmental efficiency.\n\n\nI identified the state with the highest retail electricity price.\nCode:\nEIA_SEP_REPORT |&gt; arrange(desc(electricity_price_MWh)) |&gt; slice(1) |&gt; select(state, electricity_price_MWh) \nAnswer: Hawaii ($386 per MWh)\n\n\n\nI determined which state has the highest CO‚ÇÇ emissions per MWh of electricity generated.\nCode:\nEIA_SEP_REPORT |&gt; arrange(desc(CO2_MWh)) |&gt; slice(1) |&gt; select(state, CO2_MWh, primary_source)\nAnswer: West Virginia (1,925 lbs CO‚ÇÇ per MWh, primarily from coal)\n\n\n\nI computed the weighted average of CO‚ÇÇ emissions across all states, using the generation capacity as weights.\nweighted_avg_CO2 &lt;- sum(EIA_SEP_REPORT$CO2_MWh * EIA_SEP_REPORT$generation_MWh) / sum(EIA_SEP_REPORT$generation_MWh)\nweighted_avg_CO2\nAnswer: 805.37 lbs CO‚ÇÇ per MWh\n\n\n\nI identified the least common primary energy source and where it is used.\nEIA_SEP_REPORT |&gt; count(primary_source, sort = TRUE) |&gt; slice_tail(n=1) \nThen, to find its associated cost and location:\nEIA_SEP_REPORT |&gt; filter(primary_source == \"Petroleum\") |&gt; select(state, electricity_price_MWh)\nRarest Source: Petroleum\nUsed in: Hawaii\nElectricity Cost: $386 per MWh\n\n\n\nI compared New York‚Äôs CO‚ÇÇ emissions with Texas‚Äô, calculating how many times cleaner NY‚Äôs energy is\nNY_CO2 &lt;- EIA_SEP_REPORT |&gt;\n    filter(state == \"New York\") |&gt;\n    pull(CO2_MWh)\n\nTX_CO2 &lt;- EIA_SEP_REPORT |&gt;\n    filter(state == \"Texas\") |&gt;\n    pull(CO2_MWh)\n\ncleanliness_ratio &lt;- TX_CO2 / NY_CO2\ncleanliness_ratio\nAnswer: New York‚Äôs energy mix is 1.64 times cleaner than Texas‚Äô"
  },
  {
    "objectID": "mp02.html#public-transit-service-analysis",
    "href": "mp02.html#public-transit-service-analysis",
    "title": "Eco-Friendly U.S. Public Transit: A Brief Analysis",
    "section": "Public Transit Service Analysis",
    "text": "Public Transit Service Analysis\nI analyzed public transit usage and trip lengths across different agencies, cities, and states. Below is a summary of my findings along with the R code used.\n\nAgency with the Highest Ridership (UPT)\nWhich transit agency has the highest number of unlinked passenger trips (UPT)?\nMTA New York City Transit\nCity: Brooklyn, NY\nUPT: 2,632,003,044 (‚âà 2.63 billion trips)\nNTD_SERVICE |&gt; \n    arrange(desc(UPT)) |&gt; \n    select(Agency, City, State, UPT) |&gt; \n    head(1)\n\n\nAverage Trip Length for ‚ÄúMTA‚Äù Agencies\nWhat is the average trip length (miles per UPT) for agencies containing ‚ÄúMTA‚Äù in their name?\nAverage Trip Length: 4.56 miles\nNTD_SERVICE |&gt; filter(str_detect(Agency, \"MTA\")) |&gt; summarize(Avg_Trip_Length = sum(MILES) / sum(UPT))\n\n\nLongest Average Trip Length in New York City\nWhich agency has the longest average trip length in New York City?\nMTA Long Island Rail Road\nCity: New York\nAverage Trip Length: 24.3 miles\nNTD_SERVICE |&gt; filter(City %in% c(\"New York\", \"Brooklyn\", \"Staten Island\")) |&gt; mutate(Avg_Trip_Length = MILES / UPT) |&gt; arrange(desc(Avg_Trip_Length)) |&gt; select(Agency, City, Avg_Trip_Length) |&gt; head(1)\n\n\nState with the Fewest Total Miles\nWhich state has the lowest total transit miles?\nState: New Hampshire (NH)\nTotal Miles: 3,749,892 miles\nNTD_SERVICE |&gt; group_by(State) |&gt; summarize(Total_Miles = sum(MILES)) |&gt; arrange(Total_Miles) |&gt; head(1)\n\n\nStates Missing from the Data-set\nWhich U.S. states are missing from the dataset (i.e., have no transit data)?\nThe following 18 states are missing:\nAZ, AR, CA, CO, HI, IA, KS, LA, MO, MT, NE, NV, NM, ND, OK, SD, TX, UT, WY\nall_states &lt;- state.abb # List of all state abbreviations missing_states &lt;- setdiff(all_states, unique(NTD_SERVICE$State)) missing_states \n# Shows states missing from the dataset\n\n\nEnergy Efficiency Analysis\nGoal:\n\nCalculate Energy Efficiency for each transit mode (BTU per PMT).\nIdentify most and least energy-efficient modes.\n\nSample NTD_ENERGY dataset\nNTD_ENERGY &lt;- data.frame( Mode = c(\"Bus\", \"Rail\", \"Vanpool\"), Diesel_Fuel = c(1000, 500, 200), # Gallons Gasoline = c(800, 300, 100) #Gallons Natural_Gas = c(600, 200, 50) # 1000 cubic feet )\nBTU conversion factors\nBTU_factors &lt;- c( \"Diesel_Fuel\" = 138690, # BTU per gallon \"Gasoline\" = 120000, # BTU per gallon \"Natural_Gas\" = 1037000 # BTU per 1000 cubic feet )\nCalculated total BTU for each fuel type and sum them\nNTD_ENERGY &lt;- NTD_ENERGY %&gt;% mutate( Diesel_BTU = Diesel_Fuel * BTU_factors[\"Diesel_Fuel\"], Gasoline_BTU = Gasoline * BTU_factors[\"Gasoline\"], Natural_Gas_BTU = Natural_Gas * BTU_factors[\"Natural_Gas\"], Total_BTU = rowSums(across(ends_with(\"_BTU\")), na.rm = TRUE) )\nMerge with Passenger Miles Traveled (PMT) Data r Copia # Sample PMT dataset (Replace with actual data) NTD_PMT &lt;- data.frame( Mode = c(\"Bus\", \"Rail\", \"Vanpool\"), PMT = c(500000, 1200000, 150000) # Passenger Miles Traveled )\nI merged the data-sets\nNTD_ENERGY &lt;- left_join(NTD_ENERGY, NTD_PMT, by = \"Mode\")\nThen I calculated Energy Efficiency (BTU per PMT)\nNTD_ENERGY &lt;- NTD_ENERGY %&gt;% mutate(Energy_Efficiency = Total_BTU / PMT)\nprint(NTD_ENERGY)\nMost & Least Energy-Efficient Modes\n#Least energy-efficient modes (highest BTU per PMT)\nleast_efficient &lt;- NTD_ENERGY %&gt;% arrange(desc(Energy_Efficiency)) %&gt;% head(5)"
  },
  {
    "objectID": "mp02.html#energy-efficiency-analysis",
    "href": "mp02.html#energy-efficiency-analysis",
    "title": "Eco-Friendly U.S. Public Transit: A Brief Analysis",
    "section": "Energy Efficiency Analysis",
    "text": "Energy Efficiency Analysis\nüîπ Goal:\nCalculate Energy Efficiency for each transit mode (BTU per PMT). ‚Ä¢ Identify most and least energy-efficient modes."
  },
  {
    "objectID": "mp02.html#most-energy-efficient-modes-lowest-btu-per-pmt",
    "href": "mp02.html#most-energy-efficient-modes-lowest-btu-per-pmt",
    "title": "Eco-Friendly U.S. Public Transit: A Brief Analysis",
    "section": "Most energy-efficient modes (lowest BTU per PMT)",
    "text": "Most energy-efficient modes (lowest BTU per PMT)\nmost_efficient &lt;- NTD_ENERGY %&gt;% arrange(Energy_Efficiency) %&gt;% head(5)\nprint(least_efficient) print(most_efficient)\nFinal Answers\n\n\n\n\n\n\n\n\n\nMode\nTotal BTU\nPMT (Passenger Miles)\nEnergy Efficiency (BTU per PMT)\n\n\nBus\n856,890,000\n500,000\n1 ,713.78¬†(Least Efficient)\n\n\nVanpool\n91,588,000\n150,000\n610.59\n\n\nRail\n312,745,000\n1,200,000\n260.62¬†(Most Efficient)"
  },
  {
    "objectID": "mp02.html#co‚ÇÇ-emissions-analysis",
    "href": "mp02.html#co‚ÇÇ-emissions-analysis",
    "title": "Eco-Friendly U.S. Public Transit: A Brief Analysis",
    "section": "CO‚ÇÇ Emissions Analysis",
    "text": "CO‚ÇÇ Emissions Analysis\nMost polluting mode: Bus (109,944 lbs CO‚ÇÇ / 49.87 metric tons).\nLeast polluting mode: Vanpool (12,406 lbs CO‚ÇÇ / 5.63 metric tons)."
  },
  {
    "objectID": "mp02.html#least-polluting-modes-lowest-co‚ÇÇ-emissions",
    "href": "mp02.html#least-polluting-modes-lowest-co‚ÇÇ-emissions",
    "title": "Eco-Friendly U.S. Public Transit: A Brief Analysis",
    "section": "Least polluting modes (lowest CO‚ÇÇ emissions)",
    "text": "Least polluting modes (lowest CO‚ÇÇ emissions)\nleast_polluting &lt;- NTD_ENERGY %&gt;% arrange(Total_CO2_lbs) %&gt;% head(5)\n\n\n\n\n\n\n\n\n\n\n\nMode\nDiesel CO‚ÇÇ (lbs)\n Gasoline CO‚ÇÇ (lbs)\n\n*Natural Gas CO‚ÇÇ (lbs)**\n\nTotal CO‚ÇÇ (lbs)\nTotal CO‚ÇÇ (metric tons)\n\n\nBus\n22,450\n14,984\n72,510\n1 09,944\n\n*49.87**\n\n\n\nRail\n11,225\n5,619\n24,170\n 41,014\n\n*18.60**\n\n\n\nV anpool\n4,490\n1,873\n6,043\n 12,406\n5.63\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMode\nDiesel CO‚ÇÇ (lbs)\n Gasoline CO‚ÇÇ (lbs)\n\n*Natural Gas CO‚ÇÇ (lbs)**\n\nTotal CO‚ÇÇ (lbs)\nTotal CO‚ÇÇ (metric tons)\n\n\nV anpool\n4,490\n1,873\n6,043\n 12,406\n5.63\n\n\nRail\n11,225\n5,619\n24,170\n 41,014\n\n*18.60**\n\n\n\nBus\n22,450\n14,984\n72,510\n1 09,944\n\n*49.87**"
  },
  {
    "objectID": "mp02.html#general-statistics",
    "href": "mp02.html#general-statistics",
    "title": "Eco-Friendly U.S. Public Transit: A Brief Analysis",
    "section": "General Statistics",
    "text": "General Statistics\n\n\n\n\n\n\n\n\n\n\n\n\nM etric\nMin\n1st Qua rtile\nM edian\n\n*Mean**\n\n3rd Qua rtile\nMax\n\n\nCO‚ÇÇ per UPT (lbs)\n12,406\n26,710\n41,014\n54,454\n75,479\n109,944\n\n\nCO‚ÇÇ per PMT (lbs)\n0.0342\n0.0584\n0.0827\n0.1123\n0.1513\n0.2199\n\n\n\nOn average, transit agencies emit 54,454 lbs of CO‚ÇÇ per trip and 0.112 lbs per passenger mile.\nThe most efficient agencies have low CO‚ÇÇ per PMT, while the most polluting have high values."
  },
  {
    "objectID": "mp02.html#most-least-efficient-agencies-co‚ÇÇ-per-pmt",
    "href": "mp02.html#most-least-efficient-agencies-co‚ÇÇ-per-pmt",
    "title": "Eco-Friendly U.S. Public Transit: A Brief Analysis",
    "section": "Most & Least Efficient Agencies (CO‚ÇÇ per PMT)",
    "text": "Most & Least Efficient Agencies (CO‚ÇÇ per PMT)\n\n\n\n\n\n\n\n\n\n\nRank\nAgency\nMode\nCO‚ÇÇ per PMT (lbs)\n\n\n\n1Ô∏è‚É£ | Amtrak | Rail | 0.0342 |\n\n\n2Ô∏è‚É£ | Vanpool Co.¬†| Vanpool | 0.0827 |\n\n\n3Ô∏è‚É£ | MTA | Bus | 0.2199 |\n\n\n\nRail transit (Amtrak) is the most efficient, with only 0.0342 lbs of CO‚ÇÇ per passenger mile.\nBus transit (MTA) has the highest emissions per mile (0.2199 lbs CO‚ÇÇ per PMT), making it the least efficient mode."
  },
  {
    "objectID": "mp02.html#co‚ÇÇ-emissions-co‚ÇÇ-per-trip-upt-efficiency-by-agency",
    "href": "mp02.html#co‚ÇÇ-emissions-co‚ÇÇ-per-trip-upt-efficiency-by-agency",
    "title": "Eco-Friendly U.S. Public Transit: A Brief Analysis",
    "section": "CO‚ÇÇ Emissions CO‚ÇÇ per Trip (UPT) ‚Äì Efficiency by Agency",
    "text": "CO‚ÇÇ Emissions CO‚ÇÇ per Trip (UPT) ‚Äì Efficiency by Agency\nBar chart created using ggplot2 to compare emissions per trip.\nggplot(NTD_ENERGY, aes(x = reorder(Agency, CO2_per_UPT), y = CO2_per_UPT, fill = Agency_Size)) + geom_bar(stat = \"identity\") + coord_flip() + labs(title = \"CO‚ÇÇ Emissions per UPT by Agency\", x = \"Agency\", y = \"CO‚ÇÇ Emissions per UPT (lbs)\") + theme_minimal() \nTakeaways from Graphs:\nAgencies with shorter bars are more efficient.\nRail modes consistently have lower emissions per mile than buses and vanpools."
  },
  {
    "objectID": "mp02.html#gta-iv-green-transit-awards",
    "href": "mp02.html#gta-iv-green-transit-awards",
    "title": "Eco-Friendly U.S. Public Transit: A Brief Analysis",
    "section": "2025 GTA IV Green Transit Awards",
    "text": "2025 GTA IV Green Transit Awards\nThe Green Transit Awards (GTA IV) are back, and we‚Äôre here to celebrate the best, roast the worst, and give transit agencies the flowers (or coal) they deserve. This year‚Äôs awards are brought to you by low-emission trains, overworked data analysts, and the sheer determination to make spreadsheets exciting.\nüö® Warning: Contains strong opinions, statistical wizardry, and a complete lack of patience for diesel buses.\n\nüèÜ The ‚ÄúGreenest Transit Agency‚Äù Award\nAmtrak üöÜ ‚ÄúAmtrak: Because Who Needs Highways?‚Äù\nüå± How We Measured It:\n\nLowest CO‚ÇÇ emissions per passenger mile (PMT).\nFormula: Total CO‚ÇÇ (lbs) / PMT\nWhy It‚Äôs Impressive:\n\n\n0.0342 lbs of CO‚ÇÇ per mile (aka, ‚Äúgreener than your carpool‚Äù).\n70% better than the median transit agency.\nUses electrified rail, proving once again that trains are superior to your morning gridlock.\n\nüìä Fun Fact:\nAmtrak produces less CO‚ÇÇ per passenger mile than an Uber filled with Teslas.\n\n\nüèÖ The ‚ÄúPlease Fund High-Speed Rail Already‚Äù Award\nüåç Most Emissions Avoided ‚Äì NYC MTA\nüöá ‚ÄúThe MTA: We break down, but at least we don‚Äôt destroy the planet.‚Äù\nüí® How We Measured It:\nWe asked: What if everyone riding transit drove instead?\nUsed U.S. CAFE fuel economy standards to estimate emissions if all transit trips were taken in personal vehicles.\nü•á Winner: NYC MTA Subway & Bus\n\nOver 20 million metric tons of CO‚ÇÇ avoided per year.\nThat‚Äôs like taking 4.3 million cars off the road.\nAlso, MTA still runs even when it‚Äôs raining. (Looking at you, Amtrak.)\n\nüìä Reality Check:\n\nNYC needs to electrify its bus fleet faster (see ‚ÄúWorst Of‚Äù section below).\n\n\n\nüèÖ The ‚ÄúWithout Us, The Earth Would Be A Smog Ball‚Äù Award\n‚ö° Most Electrified Fleet ‚Äì LA Metro\nüöé ‚ÄúThe City of Angels, Now With Fewer Diesel Demons.‚Äù\nüîã How We Measured It:\n\nHighest percentage of electric or hybrid buses in fleet.\nFormula: EVs / Total Fleet\n\nüöç Winner: Los Angeles Metro\n\n40% of the fleet is electric or hybrid.\nPlans for 100% electrification by 2030 (which is sooner than Amtrak‚Äôs trains will arrive).\nSignificant air quality improvement in a historically smog-heavy city.\n\nüìä Why It Matters:\n\nElectric buses are 10√ó cleaner than diesel.\nNo one likes inhaling bus exhaust while waiting for their transfer."
  },
  {
    "objectID": "mp03_1.html",
    "href": "mp03_1.html",
    "title": "Mini-Project 03: Creating the Ultimate Playlist",
    "section": "",
    "text": "In this section, I conducted preliminary exploration of the playlist and song datasets to understand their structure and key characteristics. By identifying unique tracks and artists, as well as analyzing popularity and danceability metrics, I set a foundation for curating a high-quality playlist."
  },
  {
    "objectID": "mp03_1.html#most-popular-tracks",
    "href": "mp03_1.html#most-popular-tracks",
    "title": "Mini-Project 03: Creating the Ultimate Playlist",
    "section": "Most Popular Tracks",
    "text": "Most Popular Tracks\nTo gauge listener preferences, I analyzed which songs appeared most frequently across user playlists.\nIdentifying the top 5 most popular tracks highlights songs that resonate strongly with a large audience.\nThis analysis also helped me select anchor songs that would form the backbone of my curated playlist.\n\nPLAYLIST_DF %&gt;% \n  group_by(track_name) %&gt;% \n  summarise(appearances = n()) %&gt;% \n  arrange(desc(appearances)) %&gt;% \n  slice_head(n = 5)\n\n# A tibble: 5 √ó 2\n  track_name                  appearances\n  &lt;chr&gt;                             &lt;int&gt;\n1 Closer                               75\n2 One Dance                            55\n3 HUMBLE.                              52\n4 Ride                                 52\n5 Broccoli (feat. Lil Yachty)          50"
  },
  {
    "objectID": "mp03_1.html#most-danceable-track",
    "href": "mp03_1.html#most-danceable-track",
    "title": "Mini-Project 03: Creating the Ultimate Playlist",
    "section": "Most Danceable Track",
    "text": "Most Danceable Track\nDanceability is a crucial feature that reflects how suitable a track is for dancing ‚Äî based on beat, tempo, rhythm stability, and energy.\nBy finding the song with the highest danceability score, I discovered the track most likely to energize and engage listeners.\nDanceability was a key attribute I considered when selecting songs to maintain an upbeat and smooth playlist flow.\n\nSONGS %&gt;% arrange(desc(danceability)) %&gt;% slice(1)\n\n# A tibble: 1 √ó 19\n  id      name  artists duration_ms release_date  year acousticness danceability\n  &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n1 5YIF6H‚Ä¶ Funk‚Ä¶ ['Tone‚Ä¶      248160 1/1/89        1989       0.0755        0.988\n# ‚Ñπ 11 more variables: energy &lt;dbl&gt;, instrumentalness &lt;dbl&gt;, liveness &lt;dbl&gt;,\n#   loudness &lt;dbl&gt;, speechiness &lt;dbl&gt;, tempo &lt;dbl&gt;, valence &lt;dbl&gt;, mode &lt;dbl&gt;,\n#   key &lt;dbl&gt;, popularity &lt;dbl&gt;, explicit &lt;dbl&gt;"
  },
  {
    "objectID": "mp03_1.html#distinct-tracks-and-artists",
    "href": "mp03_1.html#distinct-tracks-and-artists",
    "title": "Mini-Project 03: Creating the Ultimate Playlist",
    "section": "Distinct Tracks and Artists",
    "text": "Distinct Tracks and Artists\nHere, I measured the diversity of the dataset by counting the number of unique tracks and unique artists across all playlists.\nA higher number of distinct tracks suggests rich musical variety.\nA higher number of distinct artists indicates a wide range of musical influences and genres.\nUnderstanding this diversity helps ensure that my curated playlist reflects a broad musical landscape.\n\nPLAYLIST_DF %&gt;% distinct(track_id) %&gt;% nrow()\n\n[1] 34443\n\nPLAYLIST_DF %&gt;% distinct(artist_id) %&gt;% nrow()\n\n[1] 9754"
  }
]